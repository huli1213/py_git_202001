vi编辑器:
有3种模式:
	1.编辑模式(插入模式)
	2.命令模式
	3.正常模式
功能:
	1.如果文本文件不存在先创建然后再
			打开
	2.如果文本文件已经存在则直接打开
格式:
	vi  要创建/打开的文本文件名.后缀

刚开始进入vi是正常模式
在其它模式中可以按Esc返回到正常模式

正常模式下可以按字母 i/o/a/s 进入编辑模式
i->前插        I->顶插
o->下插        O->上插
a->后插        A->末尾插
s->删除后再插  S->删除整行再插

正常模式下按 Shift : 进入命令模式

在命令模式/编辑模式下都可以按Esc键返回到正常模式
	按字母 i/o/a/s
正常模式 -> 编辑模式
    Shift :
正常模式 -> 命令模式
    先按Esc返回正常模式 Shift :
编辑模式  -> 命令模式
	先按Esc返回正常模式 i/o/a/s
命令模式  ->  编辑模式

正常模式:
	切换到其它模式的桥梁
	不能输入vi的内容
	提供了一些操作
复制:yy默认复制1行 2yy 200yy
剪切:dd默认剪切1行 500dd
粘贴:p
删除:只剪切不粘贴
撤销:u
复制和剪切没有超过2行不会有提示
如果超过2行在左下角就会有提示
复制和剪切都是从光标所占行开始向下复制或剪切
粘贴是从光标所占行的下一行插入

编辑模式:没有命令可用,可以输入vi的内容

命令模式:可以保存和退出vi编辑器
wq -> 保存并退出(x)
w  -> 保存不退出
q  -> 退出不保存
w! -> 强制保存(强制写入)
q! -> 强制退出
set nu -> 设置行号
set nonu -> 关闭行号

变量:
	内存中的一块存储区域
变量的类型      存储大小   占位符
char(字符类型)   1个字节    %c
short(短整型)    2个字节    %hd
int(整型)        4个字节    %d
long(长整型)     4个字节    %ld

float(单精度)    4个字节    %f
double(双精度)   8个字节    %lf
当看到变量类型要想到2个东西:
1.该变量占几个位置
2.谁帮它占位置
当看到占位符也要想到2个东西:
1.该占位符占几个位置
2.帮谁占位置
变量的定义:
变量的类型 变量名;
int          i;
变量的类型  变量名 = 值;
  double      d    =  3.2+3.1;
在计算机里面一个=代表赋值符号
赋值符号就是把=右边的结果放到=左边里面去
在计算机里面如果要判断是否相等就用==

流程控制:
	1.顺序
	2.选择
	3.循环

if(表达式)
	语句;
表达式成立 -> 执行语句
表达式不成立 -> 不执行语句
语句的执行或不执行主要看表达式是否成立
3+2
看表达式成立不成立
主要看表达式的结果是否等于0
如果结果等于0 -> 表示不成立
如果结果不等于0 -> 表示成立
3>2
如果是关系型表达式看成立不成立
主要是看表达式的关系是否为真
如果关系为真 -> 用1代表结果
如果关系为假 -> 用0代表结果

if(表达式)
	语句A;
else
	语句B;

if(表达式1)
	语句A;
else if(表达式2)
	语句B;
else if(表达式3)
	语句C;
else
	语句D;
if和else默认只能控制一条语句
如果要控制多条语句就加{}


printf("1")
printf("2")
printf("3")
printf("4")

循环:
	goto
	递归
	
for( ; ; )
	d;

for(初始化部分;条件判断表达式部分;增量部分)
			
			语句;
for循环一定是由3部分组成
3个部分之间是用";"
3个部分都可以不写内容但两个";"必须要有
for循环默认只能控制一条语句
如果要控制多条语句就加{}

a<101
a<=100

数组
int arr[5]

a=5
if(a==9)
	printf("123");
if(9==a)
	printf("123");

if(a=9)
	printf("123");
if(9=a)
	printf("123");

while(表达式)
	语句;
while循环默认也只能控制一条语句
如果要控制多条语句就加{}	
	
初始化;	
while( 表达式 ){			
		语句;
		增量;
}	
	
do{
	语句;
	
}while(表达式);	
	
while( 表达式 ){			
		语句;
}		
for( ;表达式; ){
			
	语句;	
}
	
do{
	输入密码;
	
}while(判断密码是否正确);	
	
while( 判断密码是否正确 ){			
		输入密码;
}		
for( ;判断密码是否正确; ){	
	输入密码;	
}	
	
为了解决用户输错密码后可以再次输入
加循环 do...while...
为了解决用户无限次输入密码
加入用户输入的有效次数
为了解决用户乱入密码
scanf("%*[^\n]");
scanf("%*c");
为了让用户中途可以退出	
让用户选择是否继续

为了解决用户输入正确密码无法退出
在密码正确后面加上 break
	






